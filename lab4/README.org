#+TITLE: Laborator 4: Algoritmi criptografici flux și pe blocuri
#+AUTHOR: Adrian Manea

Pentru un bonus, puteți rezolva toate exercițiile de mai jos pe fișiere-text,
ca date de intrare. Alegeți un paragraf de Wikipedia sau ce mesaj doriți,
de cîteva propoziții lungime și "criptați-le" cu procedurile din acest laborator.

* Cifrul Cezar
O variantă modernă a unuia dintre primele sisteme de criptare din istorie,
aparținînd lui Iulius Cezar, este următoarea:

1. Se citește un mesaj în text clar;
2. Se asociază fiecărui caracter din mesaj codul său ASCII;
3. Se aplică o translație cu =n= unități codurilor ASCII, cu =n= citit de la
   tastatură sau ales aleatoriu;
4. Se transformă înapoi din coduri ASCII în caractere și se afișează mesajul criptat rezultat.

*Exercițiu L4.1.:* Scrieți un program care să aplice cifrul Cezar pe un cuvînt
citit de la tastatură, /fără pasul 3/ (echivalent, ~n=0~).

*Exercițiu L4.2.:* Scrieți un program care să aplice cifrul Cezar pe un cuvînt
citit de la tastatură, cu pasul 3 avînd =n= ales aleatoriu.

*Exercițiu L4.3.:* Scrieți un program care să aplice cifrul Cezar /pe blocuri/:
1. Citiți mesajul în text clar (un cuvînt sau mai multe);
2. Citiți lungimea blocului =b=;
3. Împărțiți mesajul în blocuri de lungime =b=;
4. Pentru fiecare bloc, aplicați cifrul Cezar de mai sus, schimbînd valoarea lui =n= la fiecare bloc;
5. Concatenați blocurile rezultate și afișați mesajul criptat.

*Observație:* Opțional, dacă mesajul nu se împarte în mod egal în blocuri, puteți
folosi 0-padding, adică să concatenați blocul incomplet cu 0.

Exemplu: 
- mesaj: =LABORATORCRIPTOGRAFIE=;
- lungimea blocului: ~b = 4~;
- blocuri: ~LABO RATO RCRI PTOG RAFI E000~.

* Cifrul Cezar în =Z26=
Procedura de mai sus poate fi aplicată și astfel:
1. Se ia poziția din alfabet a fiecărui caracter din mesajul clar;
2. Se generează aleatoriu sau se introduce de la tastatură o cheie;
3. Fiecare poziție din alfabet se adună /modulo 26/ cu cheia și rezultă mesajul criptat.

*Exercițiu L4.4.:* Implementați această variantă a codului Cezar.

Pentru mai multă securitate, se pot folosi, din nou, blocuri. Mesajul se împarte în
blocuri de lungime fixată și se schimbă cheia la fiecare bloc.

*Exercițiu L4.5.:* Implementați varianta pe blocuri a codului Cezar.
Pentru primul bloc, alegeți cheia aleatoriu. Pentru celelalte blocuri, aveți libertatea
de a inventa o regulă (preferabil recurentă) prin care să se genereze și celelalte blocuri.

* Criptarea afină
Procedura Cezar poate fi întărită folosind un /sistem afin/. Astfel, fie =p= poziția din
alfabet a unei litere din mesajul în clar. Cifrul Cezar o transformă în =p + k (mod 26)=,
unde =k= este cheia.

Criptosistemul afin folosește două chei, =a= și =b=, și transformă =p= în =ap + b (mod 26)=.

*Exercițiu L4.6.:* Implementați criptosistemul afin corespunzător exercițiului 4.
*Exercițiu L4.7.:* Implementați criptosistemul afin pe blocuri, corespunzător exercițiului 5.

* Matrice de criptare
Această metodă funcționează pentru criptarea pe blocuri. Presupunem că avem un algoritm
de criptare care funcționează pe blocuri de lungime =N=. Fiecărui caracter din mesajul de intrare
i se asociază poziția din alfabet, deci vom converti mesajul de intrare în șiruri care conțin
numerele 1..26.

Pentru fiecare bloc de lungime =N=, se generează (e.g. aleatoriu) o matrice =N x N= și
pentru criptare, se înmulțesc vectorii-coloană corespunzători blocului cu această matrice 
(*modulo 26!*), obținîndu-se noile blocuri. La final, blocurile se recompun și se 
obține mesajul criptat.

*Exercițiu L4.8.:* Implementați această metodă, folosind matrice generate aleatoriu și blocuri
de lungimi citite de la tastatură.

* Matrice de criptare: Varianta afină
Dacă =B= este vectorul-coloană corespunzător unui bloc din exercițiul anterior, iar =K= este
matricea-cheie de criptare, atunci criptarea funcționează astfel ~B -> KB~.

În varianta afină, folosiți, pe lîngă matricea =K=, încă un vector-coloană =Q=, astfel că
blocul criptat se va obține din ecuația ~B -> KB + Q~.

*Exercițiu 4.9.:* Implementați această metodă, cu matricele =K= și =Q= generate aleatoriu.
*Atenție!* Toate operațiile se fac modulo 26!

* Criptarea-flux în binar, folosind =XOR= (*Vernam*)
Mulți algoritmi criptografici se folosesc de funcții implementate pe biți, precum "sau exclusiv",
notat =XOR=. Această operație, notată cu ⊕, este, de fapt, adunarea în =Z2=.

Un algoritm simplu este cel al lui Gilbert Vernam (1890-1960). Acesta folosește:
- un flux binar, reprezentînd mesajul clar;
- un flux binar, care este cheia de criptare;
- mesajul criptat se obține prin aplicarea XOR între cele două.

Astfel, dat mesajul =CRIPTOGRAFIE=, de exemplu, putem proceda:
1. Se iau codurile ASCII ale fiecărui caracter din mesaj;
2. Se transformă în binar fiecare dintre aceste coduri;
3. Se generează aleatoriu un /keystream/ în binar, de lungimea mesajului;
4. Se calculează =XOR= între cele două stream-uri;
5. Rezultatul se trece din binar în zecimal și se recuperează caracterele.

*EXEMPLU*:

*Exercițiu L4.10.:* Implementați criptarea Vernam de mai sus.

* Suplimentar: Generarea cheilor
Puteți considera orice variație a cifrurilor de mai sus în locul generării aleatorii.
De exemplu, în practică, se folosesc /chei publice/, adică se cunoaște un mesaj de intrare
care servește drept cheie, dar nu se știe cum se folosește în algoritm (sau se folosește
într-o metodă foarte complexă computațional). În plus, pentru criptarea pe blocuri, se folosește
des o metodă recurentă: cheia pentru blocul =b+1= se obține printr-o anume metodă predeterminată
din cheia pentru blocul =b=.

*Exercițiu suplimentar:* Implementați oricare dintre exercițiile de mai sus folosind o cheie
publică, folosită într-o manieră aleasă de voi. Exemplu: după ce preluați mesajul în clar,
puneți o întrebare utilizatorului, prin care să răspundă cu un singur cuvînt (de exemplu,
ce oraș ar vrea să viziteze după pandemie) și folosiți cuvîntul respectiv drept (prima) cheie.
